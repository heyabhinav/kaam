routers/upload.py

from fastapi import APIRouter, File, UploadFile, HTTPException, Form
from pydantic import BaseModel
from typing import Dict
from repositories.file_operations import save_and_extract_images
import json

router = APIRouter()

class EventModel(BaseModel):
    source_hash: str
    dest_hash: str
    # Add other fields as necessary

@router.post("/upload")
async def upload_file(zipped_file: UploadFile = File(...), event: str = Form(...)):
    try:
        event_data = json.loads(event)
        event_model = EventModel(**event_data)
        await save_and_extract_images(zipped_file, event_model.source_hash)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"File upload and extraction failed: {str(e)}")
    
    return {"detail": "File uploaded and images extracted successfully."}



2. Repository Module
Create a repository for handling file operations, including unzipping the files.

repositories/file_operations.py

import os
import zipfile
from fastapi import UploadFile
from typing import Any

async def save_and_extract_images(zipped_file: UploadFile, source_hash: str):
    # Define the upload directory
    upload_dir = os.path.join("uploads", source_hash)
    
    # Ensure the directory exists
    if not os.path.exists(upload_dir):
        os.makedirs(upload_dir)
    
    # Save the ZIP file temporarily
    temp_zip_path = os.path.join(upload_dir, zipped_file.filename)
    with open(temp_zip_path, "wb") as buffer:
        buffer.write(await zipped_file.read())
    
    # Extract the ZIP file
    with zipfile.ZipFile(temp_zip_path, 'r') as zip_ref:
        zip_ref.extractall(upload_dir)
    
    # Remove the temporary ZIP file
    os.remove(temp_zip_path)


3. Main Application Module
Import the router and include it in the FastAPI application.

main.py
from fastapi import FastAPI
from routers import upload

app = FastAPI()

# Include the router
app.include_router(upload.router, prefix="/files", tags=["files"])
Client-Side Script
Assuming the client-side function is sending the zipped file and event data to the server.

Client-Side Script (upload.py)
python
Copy code
import requests
import json

def upload_files(zipped_file_path, event):
    # The URL of the HTTP server endpoint
    url = "http://127.0.0.1:8000/files/upload"
    
    # Open the ZIP file in binary mode
    with open(zipped_file_path, "rb") as zipped_file:
        files = {"zipped_file": zipped_file}
        data = {"event": json.dumps(event)}
        
        response = requests.post(url, files=files, data=data)
    
    # Print the server's response
    print(response.json())

# Example usage
zipped_file_path = "path/to/your/file.zip"
event = {
    "source_hash": "example_source_hash",
    "dest_hash": "example_dest_hash",
    # Add other event details
}
upload_files(zipped_file_path, event)







----------------










import os
from dbconnecter import DBConnecter

def upload_files(image_folder_path, source_hash):
    # The URL of the HTTP server endpoint
    url = "http://127.0.0.1:8000/files/upload"
    
    files = []
    for filename in os.listdir(image_folder_path):
        if filename.endswith((".png", ".jpg", ".jpeg")):  # Assuming images are in these formats
            file_path = os.path.join(image_folder_path, filename)
            files.append(("files", (filename, open(file_path, "rb"), "image/jpeg")))

    data = {"source_hash": source_hash}
    
    response = DBConnecter.request("POST", url, files=files, data=data)
    
    # Print the server's response
    print(response.json())

# Example usage
image_folder_path = "path/to/your/extracted/images"
source_hash = "example_source_hash"
upload_files(image_folder_path, source_hash)







--------------









